extern crate rand;
use rand::thread_rng;

use curve25519_dalek_ng::scalar::Scalar;

 extern crate merlin;
 use merlin::Transcript;

 extern crate bulletproofs;
 use bulletproofs::{BulletproofGens, PedersenGens, RangeProof};

 extern crate hex;

use std::env;

use std::io;

use ansi_term::Color::*;

const BULLET: &'static str = r#"
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777JPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777?555555555555555555555555555555577777777777777777777777
77777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&&&&&&&&&&&&&&&&#&&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&#GGGGGGGGGGGGG#&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&&&&&&&&&&&&&&#Y!G&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&GJJJJJJJJJJJJY#&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&&&&&&&&&&&&&B7~5#&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&&&&&&#PG&&&P!7B&&&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&GJJJJJJJJP&&&&&&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&&&&&&#?~JGJ~Y#&&&&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&#BBBBBBBB#&&&&&&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&&&&&&&&G?~!P&&&&&&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777Y&&&&&&&&&&&&&GB&&&&&&&&&&&&&&&#77777777777777777777777
77777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&B777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777Y&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#77777777777777777777777
77777777777777777777777JBBBBBBBBBBBBBBB#&&&&&&#BBBBBBBG777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J#######&&&&&&&################B77777777777777777777777
777777777777777777777777777777777777777JG&&&&&Y777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777??????Y&&&&&&P?????????????????77777777777777777777777
77777777777777777777777777777777777777777Y#&&&5777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777J&&&&BJ77777777777777777777777777777777777777777
777777777777777777777777777777777777777777?P&&57777777777777JYYYYJ77777777777777777777777777777777777777777777777777777777777777777777?JJ??7777777777777J&&#57777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777JB577777777777Y5J!~^!J5Y777777777777777777777777777777777777777777777777777777777777777?5Y?77?J5Y77777777777J&G?77777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777??7777777777Y5.      .5Y7777777777777777777777777777777777777777777777777777777777777Y5^     ..?P7777777777JY7777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777G^        ~G777777777777777777777777777777777777777777777777777777777777Y5.   .!Y5~ 7P777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777?G:        :G?77777777777777777777777777777777777777777777777777777777777G: ^7??!..Y7 5Y77777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777YP          5Y777777777777777777777777777777777?777777777777777777777777YY!J7~.     J7~P77777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777PJ        ?P7777777777777777777777???????????7G#PY?777777777777777777775JP.        7J.G77777777777777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777777777777G7      7G7777777777777777777777?555555555555B&&#G?7777777777777777777P!7Y       ^P:.G77777777777777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777777777777?BY^..^YG777777777777777777777777777777777777PGY?777777777777777777777G^ ?J.    ^5^  P?7777777777777777777777777777777777777777777777777777777
7777777777777777777777777777777777777777777777777777777777?G~????7G?77777777777777777777777777777777777777777777777777777777777?G.  G57~~?G!   YY7777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777?JJY5B!      !B5YJJ?777777777777777777777777777777777777777777777777777777YY .^G^^!~:?Y:. ~P7777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777?PJ?!~.?Y^.   ^Y?.~!?JP?7777777777777777777JPY77777777777777777777777777777?G5?YB^      !BJ??B?777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777G!      ^?J??JJ^      !G7777777777777777JP#&&BY55555555555?777777777777777?G~.. 7Y^    ^5! .:!G777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777JP          ...         G?777777777777777?J5B&G????????????7777777777777777P7     ^YJ:.JY:     5Y77777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777775?                      ?57777777777777777777?J7777777777777777777777777777G:       ~YY!       !G77777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777P5??7!~~^::.....:^^~~!77YG777777777777777777777777777777777777777777777777?GJJ?77!~^::::^~~!7??JG77777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777??JJJYYY555YYY5Y5YYYJJJ??77777777777777777777777777777777777777777777777777??JJJYYY5YY5YYYJJJJ?777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777?P5YJ55Y?55Y5?JY55YJP5Y77777777777777777777777777777777777777777777777777YY?55P5JP55JPJP5J5JP5YYP5Y777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777JB5PYGPP55?GYPGJGPJJBPP77777777777777777777777777777777777777777777777777?GGJPPY?BPGJGYBY?GYB5?5GG5777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777?P?7J5Y5JP557P57P5YJPY5777777777777777777777777777777777777777777777777777YP75PYJP?5J5J577PJP5JYYYY777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777?777777??77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
"#;



 fn main() {


    let lines = BULLET.lines().map(|s| s.to_string()).collect::<Vec<String>>();
    let color = Green;

    for line in &lines {
        print!("{} ", color.paint(line));
        println!("");
    }

    println!("");
    
// Generate a secret value
    let mut secret = String::new();
    let mut nbits= String::new();

    println!("Enter Secret: ");

    io::stdin().read_line(&mut secret).expect("Not Able To Process The Line");

    let secret: u64 = secret.trim().parse().expect("Numbers as input Only");

    println!("Enter The Bit Vector: ");

    io::stdin().read_line(&mut nbits).expect("Not Able To Process The Line");

    let nbits: usize = nbits.trim().parse().expect("Numbers as input Only");
// Pedersen commitments
    let ped_commits = PedersenGens::default();

// Generators for Bulletproofs, valid for proofs up to 64 bits
    let bullet_gens = BulletproofGens::new(64, 1);



// blinding factor

    let blinding_factor = Scalar::random(&mut thread_rng());


// Create transcript

    let mut prover_ts = Transcript::new("Test".as_bytes());

// Implement an n-bit rangeproof
    let (proof, commitment) = RangeProof::prove_single( &bullet_gens,&ped_commits,&mut prover_ts,secret, &blinding_factor, nbits,).expect("Oops!"); // cccccccc

    println!("Secret:\t{}",secret);
    println!("Bits:\t{}. Range: 0 to {}",nbits,u128::pow(2,nbits as u32));
 
// Verify the proof
    let mut verifier_ts = Transcript::new("Test".as_bytes());

    let rtn = proof.verify_single(&bullet_gens, &ped_commits, &mut verifier_ts, &commitment, nbits);
       
    if rtn.is_ok()==true { println!("Proven!!!"); }
    else  { println!("Not Proven!!!"); }

    let color = Red;
    println!("\n\nCommitments:\n{}",hex::encode(commitment.as_bytes()));
    println!("Proof:\n{}", color.paint(hex::encode(proof.to_bytes())));
}

